--lpm_counter DEVICE_FAMILY="Stratix II" lpm_avalue=1 lpm_direction="UP" lpm_port_updown="PORT_UNUSED" lpm_pvalue=1 lpm_width=1 aset clock cnt_en cout q
--VERSION_BEGIN 9.0 cbx_cycloneii 2008:05:19:10:57:37:SJ cbx_lpm_add_sub 2008:12:09:22:11:50:SJ cbx_lpm_compare 2009:02:03:01:43:16:SJ cbx_lpm_counter 2008:05:19:10:42:20:SJ cbx_lpm_decode 2008:05:19:10:39:27:SJ cbx_mgl 2009:01:29:16:12:07:SJ cbx_stratix 2008:09:18:16:08:35:SJ cbx_stratixii 2008:11:14:16:08:42:SJ  VERSION_END


-- Copyright (C) 1991-2009 Altera Corporation
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, Altera MegaCore Function License 
--  Agreement, or other applicable license agreement, including, 
--  without limitation, that your use is for the sole purpose of 
--  programming logic devices manufactured by Altera and sold by 
--  Altera or its authorized distributors.  Please refer to the 
--  applicable agreement for further details.


FUNCTION stratixii_lcell_comb (cin, dataa, datab, datac, datad, datae, dataf, datag, sharein)
WITH ( EXTENDED_LUT, LUT_MASK, SHARED_ARITH)
RETURNS ( combout, cout, shareout, sumout);
FUNCTION stratixii_lcell_ff (aclr, adatasdata, aload, clk, datain, ena, sclr, sload)
WITH ( x_on_violation)
RETURNS ( regout);

--synthesis_resources = lut 1 reg 1 
SUBDESIGN cntr_l0e
( 
	aset	:	input;
	clock	:	input;
	cnt_en	:	input;
	cout	:	output;
	q[0..0]	:	output;
) 
VARIABLE 
	counter_comb_bita0 : stratixii_lcell_comb
		WITH (
			EXTENDED_LUT = "off",
			LUT_MASK = "000000000000FF00",
			SHARED_ARITH = "off"
		);
	counter_reg_bit15a[0..0] : stratixii_lcell_ff;
	a_val[0..0]	: WIRE;
	aclr_actual	: WIRE;
	clk_en	: NODE;
	cout_actual	: WIRE;
	data[0..0]	: NODE;
	external_cin	: WIRE;
	lsb_cin	: WIRE;
	not_a_val[0..0]	: WIRE;
	s_val[0..0]	: WIRE;
	safe_q[0..0]	: WIRE;
	sclr	: NODE;
	sload	: NODE;
	sset	: NODE;
	sync_data_wire[0..0]	: WIRE;
	sync_select_wire	: WIRE;
	time_to_clear	: WIRE;
	updown_dir	: WIRE;
	updown_lsb	: WIRE;
	updown_other_bits	: WIRE;

BEGIN 
	counter_comb_bita[0..0].cin = ( lsb_cin);
	counter_comb_bita[0..0].datad = ( (! counter_reg_bit15a[0].regout));
	counter_comb_bita[0..0].dataf = ( updown_lsb);
	counter_reg_bit15a[].aclr = aclr_actual;
	counter_reg_bit15a[].adatasdata = not_a_val[];
	counter_reg_bit15a[].aload = aset;
	counter_reg_bit15a[].clk = clock;
	counter_reg_bit15a[].datain = ( (! ((sync_select_wire & sync_data_wire[0..0]) # ((! sync_select_wire) & counter_comb_bita[0].sumout))));
	counter_reg_bit15a[].ena = (clk_en & (((cnt_en # sclr) # sset) # sload));
	counter_reg_bit15a[].sclr = sclr;
	a_val[] = B"1";
	aclr_actual = B"0";
	clk_en = VCC;
	cout = cout_actual;
	cout_actual = (((! counter_comb_bita[0].cout) $ updown_other_bits) # (time_to_clear & updown_dir));
	data[] = GND;
	external_cin = B"1";
	lsb_cin = B"0";
	not_a_val[] = ( (! a_val[0..0]));
	q[] = safe_q[];
	s_val[] = B"1";
	safe_q[] = ( (! counter_reg_bit15a[0].regout));
	sclr = GND;
	sload = GND;
	sset = GND;
	sync_data_wire[] = ((sset & s_val[]) # ((! sset) & data[]));
	sync_select_wire = (sset # sload);
	time_to_clear = B"0";
	updown_dir = B"1";
	updown_lsb = updown_dir;
	updown_other_bits = ((! external_cin) # updown_dir);
END;
--VALID FILE
