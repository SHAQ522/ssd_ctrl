--dcfifo_mixed_widths ADD_USEDW_MSB_BIT="ON" CARRY_CHAIN="MANUAL" CARRY_CHAIN_LENGTH=48 DEVICE_FAMILY="Stratix II" IGNORE_CARRY_BUFFERS="OFF" LPM_NUMWORDS=4096 LPM_SHOWAHEAD="ON" LPM_WIDTH=32 LPM_WIDTH_R=16 LPM_WIDTHU=13 LPM_WIDTHU_R=14 OVERFLOW_CHECKING="ON" RDSYNC_DELAYPIPE=4 UNDERFLOW_CHECKING="ON" USE_EAB="ON" WRITE_ACLR_SYNCH="OFF" WRSYNC_DELAYPIPE=4 aclr data q rdclk rdempty rdreq rdusedw wrclk wrfull wrreq wrusedw CYCLONEII_M4K_COMPATIBILITY="ON" INTENDED_DEVICE_FAMILY="Stratix II" LOW_POWER_MODE="AUTO" ALTERA_INTERNAL_OPTIONS=AUTO_SHIFT_REGISTER_RECOGNITION=OFF
--VERSION_BEGIN 9.0 cbx_a_gray2bin 2008:05:19:09:32:04:SJ cbx_a_graycounter 2008:05:19:09:39:53:SJ cbx_altdpram 2008:05:19:10:27:12:SJ cbx_altsyncram 2008:11:06:10:05:41:SJ cbx_cycloneii 2008:05:19:10:57:37:SJ cbx_dcfifo 2009:01:16:15:51:00:SJ cbx_fifo_common 2008:05:19:10:54:06:SJ cbx_flex10ke 2008:05:19:10:53:03:SJ cbx_lpm_add_sub 2008:12:09:22:11:50:SJ cbx_lpm_compare 2009:02:03:01:43:16:SJ cbx_lpm_counter 2008:05:19:10:42:20:SJ cbx_lpm_decode 2008:05:19:10:39:27:SJ cbx_lpm_mux 2008:05:19:10:30:36:SJ cbx_mgl 2009:01:29:16:12:07:SJ cbx_scfifo 2008:05:19:10:25:30:SJ cbx_stratix 2008:09:18:16:08:35:SJ cbx_stratixii 2008:11:14:16:08:42:SJ cbx_stratixiii 2008:12:24:11:49:14:SJ cbx_util_mgl 2008:11:21:14:58:47:SJ  VERSION_END


-- Copyright (C) 1991-2009 Altera Corporation
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, Altera MegaCore Function License 
--  Agreement, or other applicable license agreement, including, 
--  without limitation, that your use is for the sole purpose of 
--  programming logic devices manufactured by Altera and sold by 
--  Altera or its authorized distributors.  Please refer to the 
--  applicable agreement for further details.


FUNCTION a_gray2bin_peb (gray[12..0])
RETURNS ( bin[12..0]);
FUNCTION a_graycounter_ta6 (aclr, clock, cnt_en)
RETURNS ( q[12..0]);
FUNCTION a_graycounter_khc (aclr, clock, cnt_en)
RETURNS ( q[12..0]);
FUNCTION altsyncram_4ou (address_a[11..0], address_b[12..0], addressstall_b, clock0, clock1, data_a[31..0], wren_a)
RETURNS ( q_b[15..0]);
FUNCTION dffpipe_ngh (clock, clrn, d[0..0])
RETURNS ( q[0..0]);
FUNCTION dffpipe_oec (clock, clrn, d[13..0])
RETURNS ( q[13..0]);
FUNCTION dffpipe_nec (clock, clrn, d[12..0])
RETURNS ( q[12..0]);
FUNCTION alt_synch_pipe_udb (clock, clrn, d[12..0])
RETURNS ( q[12..0]);
FUNCTION dffpipe_8d9 (clock, clrn, d[0..0])
RETURNS ( q[0..0]);
FUNCTION dffpipe_re9 (clock, clrn, d[12..0])
RETURNS ( q[12..0]);
FUNCTION alt_synch_pipe_2e8 (clock, clrn, d[12..0])
RETURNS ( q[12..0]);
FUNCTION cmpr_a46 (dataa[12..0], datab[12..0])
RETURNS ( aeb);
FUNCTION cntr_jkb (aclr, clock, cnt_en)
RETURNS ( cout, q[0..0]);

--synthesis_resources = lut 30 ram_bits (AUTO) 131072 reg 177 
OPTIONS ALTERA_INTERNAL_OPTION = "AUTO_SHIFT_REGISTER_RECOGNITION=OFF;REMOVE_DUPLICATE_REGISTERS=OFF;suppress_da_rule_internal=d101;suppress_da_rule_internal=d102;suppress_da_rule_internal=S102;{-to p0addr} POWER_UP_LEVEL=LOW;{-to rdptr_b} suppress_da_rule_internal=r105;{-to rdptr_g} suppress_da_rule_internal=r105;{-to wrptr_g} suppress_da_rule_internal=s102;-name CUT ON -from rdptr_g -to ws_dgrp|dffpipe18|dffe19a;-name SDC_STATEMENT ""set_false_path -from *rdptr_g* -to *ws_dgrp|dffpipe_te9:dffpipe18|dffe19a* "";-name CUT ON -from delayed_wrptr_g -to rs_dgwp|dffpipe13|dffe14a;-name SDC_STATEMENT ""set_false_path -from *delayed_wrptr_g* -to *rs_dgwp|dffpipe_se9:dffpipe13|dffe14a* """;

SUBDESIGN dcfifo_9ol1
( 
	aclr	:	input;
	data[31..0]	:	input;
	q[15..0]	:	output;
	rdclk	:	input;
	rdempty	:	output;
	rdreq	:	input;
	rdusedw[13..0]	:	output;
	wrclk	:	input;
	wrfull	:	output;
	wrreq	:	input;
	wrusedw[12..0]	:	output;
) 
VARIABLE 
	rdptr_g_gray2bin : a_gray2bin_peb;
	rs_dgwp_gray2bin : a_gray2bin_peb;
	wrptr_g_gray2bin : a_gray2bin_peb;
	ws_dgrp_gray2bin : a_gray2bin_peb;
	rdptr_g1p : a_graycounter_ta6;
	wrptr_g1p : a_graycounter_khc;
	fifo_ram : altsyncram_4ou;
	delayed_wrptr_g[12..0] : dffe;
	p0addr : dffe
		WITH (
			power_up = "low"
		);
	rdptr_b[0..0] : dffe;
	rdptr_g[12..0] : dffe;
	wrptr_g[12..0] : dffe;
	rdaclr : dffpipe_ngh;
	rs_brp : dffpipe_oec;
	rs_bwp : dffpipe_nec;
	rs_dgwp : alt_synch_pipe_udb;
	wrfull_reg : dffpipe_8d9;
	ws_brp : dffpipe_re9;
	ws_bwp : dffpipe_re9;
	ws_dgrp : alt_synch_pipe_2e8;
	rdusedw_sub_dataa[13..0]	:	WIRE;
	rdusedw_sub_datab[13..0]	:	WIRE;
	rdusedw_sub_result[13..0]	:	WIRE;
	wrusedw_sub_dataa[12..0]	:	WIRE;
	wrusedw_sub_datab[12..0]	:	WIRE;
	wrusedw_sub_result[12..0]	:	WIRE;
	rdempty_eq_comp : cmpr_a46;
	wrfull_eq_comp : cmpr_a46;
	cntr_b : cntr_jkb;
	int_rdempty	: WIRE;
	int_wrfull	: WIRE;
	ram_address_a[11..0]	: WIRE;
	ram_address_b[12..0]	: WIRE;
	rdcnt_addr_ena	: WIRE;
	rs_brp_reg_data[13..0]	: WIRE;
	temp_rdusedw_sub_data[13..0]	: WIRE;
	valid_rdreq	: WIRE;
	valid_wrreq	: WIRE;
	wrptr_gs[12..0]	: WIRE;

BEGIN 
	rdptr_g_gray2bin.gray[] = rdptr_g[].q;
	rs_dgwp_gray2bin.gray[] = rs_dgwp.q[];
	wrptr_g_gray2bin.gray[] = wrptr_g[].q;
	ws_dgrp_gray2bin.gray[] = ws_dgrp.q[];
	rdptr_g1p.aclr = (! rdaclr.q[]);
	rdptr_g1p.clock = rdclk;
	rdptr_g1p.cnt_en = (rdcnt_addr_ena & cntr_b.cout);
	wrptr_g1p.aclr = aclr;
	wrptr_g1p.clock = wrclk;
	wrptr_g1p.cnt_en = valid_wrreq;
	fifo_ram.address_a[] = ram_address_a[];
	fifo_ram.address_b[] = ram_address_b[];
	fifo_ram.addressstall_b = (! rdcnt_addr_ena);
	fifo_ram.clock0 = wrclk;
	fifo_ram.clock1 = rdclk;
	fifo_ram.data_a[] = data[];
	fifo_ram.wren_a = valid_wrreq;
	delayed_wrptr_g[].clk = wrclk;
	delayed_wrptr_g[].clrn = (! aclr);
	delayed_wrptr_g[].d = wrptr_g[].q;
	p0addr.clk = rdclk;
	p0addr.clrn = rdaclr.q[];
	p0addr.d = B"1";
	rdptr_b[].clk = rdclk;
	rdptr_b[].clrn = (! aclr);
	rdptr_b[].d = cntr_b.q[];
	rdptr_b[].ena = valid_rdreq;
	rdptr_g[].clk = rdclk;
	rdptr_g[].clrn = (! aclr);
	rdptr_g[].d = rdptr_g1p.q[];
	rdptr_g[].ena = valid_rdreq;
	wrptr_g[].clk = wrclk;
	wrptr_g[].clrn = (! aclr);
	wrptr_g[].d = wrptr_g1p.q[];
	wrptr_g[].ena = valid_wrreq;
	rdaclr.clock = (! rdclk);
	rdaclr.clrn = (! aclr);
	rdaclr.d[] = B"1";
	rs_brp.clock = rdclk;
	rs_brp.clrn = (! aclr);
	rs_brp.d[] = rs_brp_reg_data[];
	rs_bwp.clock = rdclk;
	rs_bwp.clrn = (! aclr);
	rs_bwp.d[] = rs_dgwp_gray2bin.bin[];
	rs_dgwp.clock = rdclk;
	rs_dgwp.clrn = (! aclr);
	rs_dgwp.d[] = delayed_wrptr_g[].q;
	wrfull_reg.clock = wrclk;
	wrfull_reg.clrn = (! aclr);
	wrfull_reg.d[] = int_wrfull;
	ws_brp.clock = wrclk;
	ws_brp.clrn = (! aclr);
	ws_brp.d[] = ws_dgrp_gray2bin.bin[];
	ws_bwp.clock = wrclk;
	ws_bwp.clrn = (! aclr);
	ws_bwp.d[] = wrptr_g_gray2bin.bin[];
	ws_dgrp.clock = wrclk;
	ws_dgrp.clrn = (! aclr);
	ws_dgrp.d[] = rdptr_g[].q;
	rdusedw_sub_result[] = rdusedw_sub_dataa[] - rdusedw_sub_datab[];
	rdusedw_sub_dataa[] = temp_rdusedw_sub_data[];
	rdusedw_sub_datab[] = rs_brp.q[];
	wrusedw_sub_result[] = wrusedw_sub_dataa[] - wrusedw_sub_datab[];
	wrusedw_sub_dataa[] = ws_bwp.q[];
	wrusedw_sub_datab[] = ws_brp.q[];
	rdempty_eq_comp.dataa[] = rs_dgwp.q[];
	rdempty_eq_comp.datab[] = rdptr_g[].q;
	wrfull_eq_comp.dataa[] = ws_dgrp.q[];
	wrfull_eq_comp.datab[] = wrptr_gs[];
	cntr_b.aclr = (! rdaclr.q[]);
	cntr_b.clock = rdclk;
	cntr_b.cnt_en = rdcnt_addr_ena;
	int_rdempty = rdempty_eq_comp.aeb;
	int_wrfull = wrfull_eq_comp.aeb;
	q[] = fifo_ram.q_b[];
	ram_address_a[] = ( (wrptr_g[12..12].q $ wrptr_g[11..11].q), wrptr_g[10..0].q);
	ram_address_b[] = ( (rdptr_g1p.q[12..12] $ rdptr_g1p.q[11..11]), rdptr_g1p.q[10..0], cntr_b.q[]);
	rdcnt_addr_ena = (valid_rdreq # (! p0addr.q));
	rdempty = int_rdempty;
	rdusedw[] = ( rdusedw_sub_result[13..0]);
	rs_brp_reg_data[] = ( rdptr_g_gray2bin.bin[], rdptr_b[].q);
	temp_rdusedw_sub_data[] = ( rs_bwp.q[], GND);
	valid_rdreq = (rdreq & (! int_rdempty));
	valid_wrreq = (wrreq & (! int_wrfull));
	wrfull = int_wrfull;
	wrptr_gs[] = ( (! wrptr_g[12..12].q), (! wrptr_g[11..11].q), wrptr_g[10..0].q);
	wrusedw[] = ( wrfull_reg.q[], wrusedw_sub_result[11..0]);
END;
--VALID FILE
